openapi: 3.0.2
info:
  title: car-go
  version: '1.0'
  description: ''
  summary: Car-go backend api
servers:
  - url: 'https://car-go-backend.herokuapp.com'
    description: prod env
paths:
  /register:
    parameters: []
    post:
      summary: Register User
      operationId: registerUser
      responses:
        '200':
          description: 'Successfully sent verification link to user, responds with token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Register new account with email & password
      security: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: Email & plaintext password
      x-internal: false
  /user:
    get:
      summary: Get User Info
      tags: []
      operationId: getUser
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer eY..
          required: true
      description: Get basic info about registered user
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              examples:
                Example 1:
                  value:
                    id: 165ecfd0-80a5-44f1-b3d2-c66313c96f6e
                    email: test@email.com
                    isVerified: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /register/verify:
    get:
      summary: Verify user's email
      tags: []
      responses:
        '204':
          description: Verified successfully
        '401':
          description: Failed to verify
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: verifyEmail
      description: Verify user's email
      parameters:
        - schema:
            type: string
          in: query
          name: code
          description: verification code from email
          required: true
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer eY..
          required: true
    parameters: []
  /login:
    post:
      summary: User login
      operationId: login
      responses:
        '200':
          description: 'Successful authentication, responds with accessToken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Login by user's credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: ''
      security: []
  /user/profile:
    post:
      summary: Update user profile
      operationId: post-user-profile
      responses:
        '201':
          description: Successfully updated profile
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
  /offers:
    post:
      summary: Add car offer
      operationId: post-offers-add
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarOfferRes'
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarOfferReq'
      description: Add car offer
    parameters: []
    get:
      summary: List available cars
      operationId: get-offers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarOfferRes'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: from datetime utc
        - schema:
            type: string
          in: query
          name: to
          description: to datetime utc
        - schema:
            type: string
          in: query
          name: city
          description: city name
        - schema:
            type: string
          in: query
          name: features
          description: comma separated 'list' of features
      description: List available cars with their info - this is a public endpoint
  '/offer/{offerId}':
    delete:
      summary: Delete offer
      operationId: delete-offer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Delete car offer
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
    parameters:
      - schema:
          type: string
        name: offerId
        in: path
        required: true
        description: offer id
    post:
      summary: Add pictures
      operationId: post-offer-offerId
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: byte
              required:
                - image
            encoding:
              image:
                contentType: 'image/png, image/jpg'
        description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
    get:
      summary: Get car offer info
      operationId: get-offer-offerId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarOfferRes'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/reservation/{offerId}':
    get:
      summary: Reserved car dates
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-reservation
      description: Returns the dates when the car is rented
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationList'
    parameters:
      - schema:
          type: string
        name: offerId
        in: path
        required: true
        description: offer id
    post:
      summary: Make reservation
      operationId: post-reservation-offerId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
      description: Request a reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeReservation'
components:
  schemas:
    UserCredentials:
      title: UserCredentials
      type: object
      examples:
        - email: test@email.com
          password: fooBar!42
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AccessToken:
      title: AccessToken
      type: object
      properties:
        access_token:
          type: string
      required:
        - access_token
      description: Token which authenticates user
    UserInfo:
      type: object
      examples:
        - id: 165ecfd0-80a5-44f1-b3d2-c66313c96f6e
          email: test@email.com
          isVerified: false
      description: Protected info about user
      title: UserInfo
      properties:
        id:
          type: string
        email:
          type: string
        is_verified:
          type: boolean
      required:
        - id
        - email
        - is_verified
    VerificationToken:
      title: VerificationToken
      type: object
      properties:
        verification_token:
          type: string
      description: Usedd to verify user
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        error:
          type: string
        description:
          type: string
      required:
        - error
    UserProfile:
      title: UserProfile
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        dob:
          type: string
        driving_licence:
          type: string
      x-examples:
        Example 1:
          first_name: Jan
          last_name: Nowak
          phone: '606606606'
          dob: 31-01-2000
          driving_licence: CFP012345
      description: ''
    Feature:
      type: string
      enum:
        - ac
        - usb
        - heated_seats
        - four_by_four
        - panorama_roof
        - bluetooth
        - aux
        - gps
      description: Describes arbitrary features
    CarOfferRes:
      title: CarOfferRes
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        owner_id:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: string
        price_per_day:
          type: number
        horsepower:
          type: string
        fuel_type:
          type: string
        features:
          type:
            - array
          items:
            $ref: '#/components/schemas/Feature'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
        seats_amount:
          type: string
        point:
          $ref: '#/components/schemas/Point'
        city:
          type: string
      required:
        - id
        - owner_id
        - make
        - model
        - year
        - price_per_day
        - horsepower
        - fuel_type
        - features
        - images
        - seats_amount
        - city
    ImageUrl:
      title: ImageUrl
      type: object
      properties:
        url:
          type: string
    Point:
      title: Point
      type: object
      description: Describes point coordinates in 2D
      properties:
        lat:
          type: string
        lon:
          type: string
      required:
        - lat
        - lon
    CarOfferReq:
      type: object
      x-examples:
        Example 1:
          make: string
          model: string
          year: string
          price_per_day: 0
          horsepower: string
          fuel_type: string
          features:
            - ac
          seats_amount: string
          point:
            lat: string
            lon: string
      title: CarOfferReq
      properties:
        make:
          type: string
        model:
          type: string
        year:
          type: string
        price_per_day:
          type: integer
        horsepower:
          type: string
        fuel_type:
          $ref: '#/components/schemas/FuelType'
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        seats_amount:
          type: string
        city:
          type: string
        point:
          type: object
          properties:
            lat:
              type: string
            lon:
              type: string
          required:
            - lat
            - lon
      required:
        - make
        - model
        - year
        - price_per_day
        - horsepower
        - fuel_type
        - features
        - seats_amount
        - city
    FuelType:
      title: FuelType
      type: string
      enum:
        - gas
        - diesel
        - electric
        - hybrid
    MaskedProfile:
      title: MaskedProfile
      type: object
      description: Masked user profile
      properties:
        name:
          type: string
        profile_picture_url:
          type: string
      required:
        - name
        - profile_picture_url
    ReservationStatus:
      title: ReservationStatus
      type: string
      enum:
        - requested
        - accepted
        - finished
        - in_progress
    Reservation:
      title: Reservation
      type: object
      description: car reservation
      properties:
        from:
          type: string
          description: from date
        to:
          type: string
          description: to date
        renter_id:
          type: string
      required:
        - from
        - to
        - renter_id
    ReservationList:
      title: ReservationList
      type: array
      items:
        $ref: '#/components/schemas/Reservation'
      description: list of reservations for certain car offer
    MakeReservation:
      title: MakeReservation
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        insurance:
          $ref: '#/components/schemas/Insurance'
      required:
        - from
        - to
        - insurance
    Insurance:
      title: Insurance
      type: string
      enum:
        - cheap
        - medium
        - expensive
  securitySchemes:
    token:
      type: http
      scheme: bearer
  responses: {}
