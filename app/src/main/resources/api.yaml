openapi: 3.0.2
info:
  title: car-go
  version: '1.0'
  description: ''
  summary: Car-go backend api
servers:
  - url: 'http://localhost:8083'
    description: local dev
paths:
  /register:
    parameters: []
    post:
      summary: Register User
      operationId: registerUser
      responses:
        '200':
          description: 'Successfully sent verification link to user, responds with token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Register new account with email & password
      security: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: Email & plaintext password
      x-internal: false
  /user:
    get:
      summary: Get User Info
      tags: []
      operationId: getUser
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer eY..
          required: true
      description: Get basic info about registered user
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              examples:
                Example 1:
                  value:
                    id: 165ecfd0-80a5-44f1-b3d2-c66313c96f6e
                    email: test@email.com
                    isVerified: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /register/verify:
    get:
      summary: Verify user's email
      tags: []
      responses:
        '204':
          description: Verified successfully
        '401':
          description: Failed to verify
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: verifyEmail
      description: Verify user's email
      parameters:
        - schema:
            type: string
          in: query
          name: code
          description: verification code from email
          required: true
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer eY..
          required: true
    parameters: []
  /login:
    post:
      summary: User login
      operationId: login
      responses:
        '200':
          description: 'Successful authentication, responds with accessToken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Login by user's credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        description: ''
      security: []
components:
  schemas:
    UserCredentials:
      title: UserCredentials
      type: object
      examples:
        - email: test@email.com
          password: fooBar!42
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AccessToken:
      title: AccessToken
      type: object
      properties:
        access_token:
          type: string
      required:
        - access_token
      description: Token which authenticates user
    UserInfo:
      type: object
      examples:
        - id: 165ecfd0-80a5-44f1-b3d2-c66313c96f6e
          email: test@email.com
          isVerified: false
      description: Protected info about user
      title: UserInfo
      properties:
        id:
          type: string
        email:
          type: string
        isVerified:
          type: boolean
      required:
        - id
        - email
        - isVerified
    VerificationToken:
      title: VerificationToken
      type: object
      properties:
        verification_token:
          type: string
      description: Usedd to verify user
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        error:
          type: string
        description:
          type: string
      required:
        - error
  securitySchemes:
    token:
      type: http
      scheme: bearer
  responses: {}
